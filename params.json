{"name":"Android Google Places","tagline":"Java library for Android for easy to use Google places API.","body":"# Android Wrapper for Google Places API\r\n\r\nThis library allows you to integrate the capabilities of google places in your App.\r\nIt uses the API provided by google for client to make an http request and parses the JSON to java objects easy to use (I hope).\r\nYou can also extend the base classes that represent queries, and and that that provide results to add functionality and customized information.\r\n\r\n## Features\r\n\r\n- Nearby Search Request\r\n- Text Search Request\r\n- Place Details request\r\n- Customized Request (based on previous)\r\n- Support for all parameters of the query and results defined in json google places query and results.\r\n- Integration and use of <a href=\"https://code.google.com/p/google-api-java-client/\">Google APIs Client Library for Java</a>\r\n- Use of Generics Java\r\n\r\n## Todo\r\n\r\nAny kind of help is welcome.\r\n\r\n- Make better documentation :)\r\n- Public javadoc\r\n- Test Unit\r\n- Support of Radar Search\r\n- Support of Place Photo\r\n- Support of Place Actions\r\n- Support of Place Autocomplete\r\n- Support of Query Autocomplete\r\n- Remove libs directory from repository (?)\r\n- Move the supported types in an appropriate container\r\n- Demo app for try this library (is already made but is not ready for you)\r\n\r\n## Setup\r\n\r\n1. Obtain an API key (Browser).  Visit the <a href=\"https://developers.google.com/places/documentation/\">developer's guide</a> for more information.\r\n2. Drop the googleplaces.jar in the lib folder of your Android project.\r\n3. If necessary download or update the <a href=\"https://code.google.com/p/google-api-java-client/\">google-api-java-client</a> ant put in yout libs directory all needed jar.\r\n\r\n# Base Usage\r\n\r\nYou first need to instantiate the base class library passing your Api Key.\r\n\r\n    GooglePlaces gp = new GooglePlaces(getResources().getString(\"YOUR API KEY\");\r\n\r\nSo you have some of methods(for now) to make the request:\r\n\r\n> - getNearbyPlaces(List<String> types, String text, int radius, double lat, double lon)\r\n> - getNearbyPlaces(List<String> types, int radius, double lat , double lon)\r\n> - getNearbyPlaces(String type, String text, int radius, double lat, double lon)\r\n> - getNearbyPlaces(double lat, double lon)\r\n> - getNearbyPlaces(int radius, double lat, double lon)\r\n> - getNearbyPlaces(int radius, double lat, double lon, boolean sensor)\r\n> - getTextPlaces(String text, boolean sensor )\r\n> - getTextPlaces(String text)\r\n> - getPlaceDetails(String reference)\r\n> - getPlaceDetails(Query query)\r\n> - getPlaces(Query query)\r\n> - getPlaces(Query query, Class<? extends Result> resultClass)\r\n    \r\nEach of these methods return a Class that implements the Result Interface.<br>\r\nFor places will be the class PlaceResult and for the details will be the class PlaceDetails.<br>\r\nWaiting for the javadoc, you can see directly into sources such parameters are set by default by classes that extend the base class: Query.<br>\r\nYou can access at all the optional parameters of the  API Google Places queries, and in the result are present all the fields provided by response.<br>\r\nBelow you will see how to create a personalized result.\r\n\r\n## Nearby Search\r\n\r\nYou have many ways to do nearby search request depending on the query that you want to perform.\r\nIf you do not specify any parameters required, the library does it for you by setting a default value.\r\n\r\nSome examples...\r\n\r\nDefine types of places, radius and location:\r\n\r\n    List<String> types = new ArrayList<String>();\r\n    types.add(\"food\");\r\n    types.add(\"restaurant\");\r\n    PlacesResult result = gp.getNearbyPlaces(types, 2000, 37.513692, 15.090934);\r\n    \r\nDefine one type and a text to sarch:\r\n\r\n    PlacesResult result = gp.getNearbyPlaces(\"food\",\"pizza\", 2000, 37.513692, 15.090934);\r\n    \r\nSearch Generic places near you location with default radius:\r\n\r\n    PlacesResult result = gp.getNearbyPlaces(37.513692, 15.090934);\r\n    \r\nSearch Generic places near you location with custom radius:\r\n\r\n    PlacesResult result = gp.getNearbyPlaces(500, 37.513692, 15.090934);\r\n    \r\nFor more information about NEarby Sarch Request you can see the <a href=\"https://developers.google.com/places/documentation/search#PlaceSearchRequests\">Official Google Place Api Documentation for Nearby Search Request</a>\r\n\r\n## Text Search\r\n\r\nSome Examples...\r\n\r\nBase:\r\n\r\n    PlacesResult result = gp.getTextPlaces(\"restaurant\");\r\n    \r\nWith Sensor Disabeld:\r\n\r\n    PlacesResult result = gp.getTextPlaces(\"restaurant\",false);\r\n    \r\nWith Custom Location:\r\n\r\n    TextSearchQuery query = new TextSearchQuery(getResources().getString(R.string.browser_api_key), textToSearch, true);\r\n    query.setLocation(37.513692, 15.090934);\r\n    PlacesResult result = gp.getPlaces(query);\r\n    \r\nFor more information about Text Sarch Request you can see the <a href=\"https://developers.google.com/places/documentation/search#TextSearchRequests\">Official Google Place Api Documentation for Text Search Request</a>\r\n\r\n## Supported Place Types\r\n    \r\nyou can check whether the types that you want to look for are supported by the API of google invoking this method:\r\n\r\n    boolean isSupported = gp.isSupportedPlace(\"placetype\");\r\n    \r\n## Handling a place search response\r\n\r\n    if (result.getStatusCode() == StatusCode.OK) {\r\n        List<Place> placesList = result.getResults();\r\n        foreach(Place place : placesList){\r\n            //do something, for example add marker\r\n            mapFragment.getMap()\r\n                .addMarker(new MarkerOptions()\r\n                    .position(new LatLng(place.getLatitude(), place.getLongitude()))\r\n                    .title(place.getName())\r\n                    .snippet(place.getFormattedAddress())\r\n\t\t   \t\t.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_CYAN)));\r\n        }\r\n    }\r\n\r\n## Place Details\r\n\r\nThe PlaceDetails Class extends the Place Clase and provide additional information such reviews, events, types and many others.\r\nTo retrieve this information must first have made a request for a Place to get the <i>reference</i> field, then you can get the details of this place in this way:\r\n\r\n    String reference = place.getReference();\r\n    PlaceDetailsResult detailsResult =  gp.getPlaceDetails(reference);\r\n    \r\nOr you can create custom details query:\r\n\r\n    DetailsQuery dq = new DetailsQuery(\"YOUR API KEY\", place.getReference());\r\n    PlaceDetailsResult detailsResult = (PlaceDetailsResult) gp.getPlaceDetails(dq);\r\n\r\n### Handling a place details response\r\n\r\n    if (detailsResult.getStatusCode() == StatusCode.OK) {\r\n        PlaceDetails placeDetails = detailsResult.getDetails();\r\n        //do something\r\n    }\r\n\r\n# Advanced Usage\r\n \r\nYou can create custom Query using the classes provided by library and setting the parameters, or you can extend them to add custom functionality.\r\nThe most important things is that you can extend classes of the results.\r\nLet's see how\r\n\r\n## Custom Query Creation\r\n\r\nFor Example, we need to set many parameters on Nearby Search Request:\r\n\r\n    NearbySearchQuery query = new NearbySearchQuery(\"YOUR API KEY\",37.513692, 15.090934);\r\n    q.setRanking(NearbySearchQuery.Ranking.Distance);\r\n    q.setLanguage(\"en\");\r\n    q.setKeyword(\"pizza\");\r\n    q.addType(\"food\");\r\n    q.addType(\"restaurant\");\r\n    q.setOpenNow(true);\r\n    q.setPageToken(previousResult.getPageToken());\r\n    \r\n    PlaceResults result = gp.getPlaces(query);\r\n\r\n## Custom Result\r\n\r\nResults of requests you can extend and create custom classes appropriate for your purposes.<br>\r\nAs an example we can create a class called POI that represents a point on google maps, then add a field \"Marker\".<br>\r\nAnother useful example would be to insert a field \"distance\" where we're going to save the distance from the origin point of the search (location).\r\n\r\n<pre><code>\r\npublic class Poi extends Place {\r\n\r\n    private Marker marker;\r\n\r\n\tpublic Poi() {\r\n\t\tsuper();\r\n\t}\r\n\t\r\n\tpublic Poi(Marker marker) {\r\n\t\tthis();\r\n\t\tthis.marker = marker;\r\n\t}\r\n\t\r\n\tpublic void removeMarker() {\r\n\t\tmarker.remove();\r\n\t}\r\n\t\r\n\tpublic Marker getMarker() {\r\n\t\treturn marker;\r\n\t}\r\n\t\r\n\tpublic void setMarker(Marker marker) {\r\n\t\tthis.marker = marker;\r\n\t}\r\n\r\n}    \r\n</code>\r\n</pre>\r\n\r\nThen Extend The abstract Class Result:\r\n\r\n<pre><code>\r\nclass PoiResult extends Result {\r\n\r\n\t@Key\r\n\tprivate List<Poi> results;\r\n\t\r\n\t@Override\r\n\tpublic List<Poi> getResults() {\r\n\t\treturn results;\r\n\t}\r\n}\r\n    </code>\r\n</pre>\r\n    \r\nthen take the results of passing the method the class definition that you created:\r\n\r\n    PoiResult poiResult = (PoiResult) gp.getPlaces(query, PoiResult.class);\r\n    if (result.getStatusCode() == StatusCode.OK)\r\n        List<Poi> placesList = result.getResults();        \r\n        ....\r\n        \r\nfor example we add the marker on google maps and save its reference.\r\n\r\n    place.setMarker(mapFragment.getMap().addMarker(new MarkerOptions()\r\n        \t.position(new LatLng(place.getLatitude(), place.getLongitude()))\r\n\t\t\t.title(place.getName()).snippet(place.getFormattedAddress())\r\n\t\t\t.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_CYAN))));\r\n    \r\ndo you want remove marker?\r\n    \r\n    poi.removeMarker();\r\n    \r\n# Contributing\r\n\r\nFork, push, and send a pull request. Enjoy!\r\n\r\nPlease Visit <a href=\"a2plab.com\">a2plab.com</a>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}